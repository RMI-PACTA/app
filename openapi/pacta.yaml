openapi: "3.0.0"
info:
  version: 1.0.0
  title: RMI PACTA
  description: |
    API for interacting with RMI's Paris Agreement Capital Transition Assessment (PACTA) infrastructure

    Note that only endpoint-specific errors will be documented. Standard errors
    (access denied, not found, internal server errors) may be thrown by any
    endpoint, see #/components/responses and #/components/schemas/Error for
    more information.
  termsOfService: TODO
  contact:
    name: Silicon Ally
    email: contact@siliconally.org
    url: https://siliconally.org
  license:
    name: MIT
    url: https://mit-license.org/
servers:
  - url: TODO
definitions:
  Language:
    type: string
    enum: &LANGUAGES
      - en
      - fr
      - es
      - de
basePath: /v1
paths:
  /pacta-version/{id}:
    get:
      summary: Returns a version of the PACTA model by ID
      operationId: findPactaVersionById
      parameters:
        - name: id
          in: path
          description: ID of pacta version to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pacta response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PactaVersion'
    patch:
      summary: Updates a PACTA version
      description: Updates a PACTA version's settable properties
      operationId: updatePactaVersion
      parameters:
        - name: id
          in: path
          description: ID of PACTA version to update
          required: true
          schema:
            type: string
      requestBody:
        description: PACTA Version object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PactaVersionChanges'
      responses:
        '204':
          description: pacta version updated successfully
    delete:
      summary: Deletes a pacta version by ID
      description: deletes a single pacta version based on the ID supplied
      operationId: deletePactaVersion
      parameters:
        - name: id
          in: path
          description: ID of pacta version to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: pacta version deleted successfully
  /pacta-version/{id}/set-default:
    post:
      summary: Marks this version of the PACTA model as the default
      operationId: markPactaVersionAsDefault
      parameters:
        - name: id
          in: path
          description: ID of pacta version to fetch
          required: true
          schema:
            type: string
      responses:
        '204':
          description: updated successfully
  /pacta-versions:
    get:
      summary: Returns all versions of the PACTA model
      operationId: listPactaVersions
      responses:
        '200':
          description: pacta versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PactaVersion'
    post:
      summary: Creates a PACTA version
      description: Creates a PACTA version
      operationId: createPactaVersion
      requestBody:
        description: PACTA Version object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PactaVersionCreate'
      responses:
        '204':
          description: pacta version created successfully
  /initiative/{id}:
    get:
      summary: Returns an initiative by ID
      operationId: findInitiativeById
      parameters:
        - name: id
          in: path
          description: ID of the initiative to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the initiative requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Initiative'
    patch:
      summary: Updates an initiative
      description: Updates an initiative's settable properties
      operationId: updateInitiative
      parameters:
        - name: id
          in: path
          description: ID of the initiative to update
          required: true
          schema:
            type: string
      requestBody:
        description: initiative object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeChanges'
      responses:
        '204':
          description: initiative updated successfully
    delete:
      summary: Deletes an initiative by id
      description: deletes an initiative based on the ID supplied
      operationId: deleteInitiative
      parameters:
        - name: id
          in: path
          description: ID of initiative to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: initiative deleted successfully
  /initiatives:
    get:
      summary: Returns all initiatives
      operationId: listInitiatives
      responses:
        '200':
          description: gets all initiatives
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Initiative'
    post:
      summary: Creates a initiative
      description: Creates a new initiative
      operationId: createInitiative
      requestBody:
        description: Initiative object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeCreate'
      responses:
        '204':
          description: initiative created successfully
  /initiative/{initiativeId}/user-relationships:
    get:
      summary: Returns all initiative user relationships for this initiative that the caller has access to view
      operationId: listInitiativeUserRelationshipsByInitiative
      parameters:
        - name: initiativeId
          in: path
          description: ID of the initiative to fetch relationships for
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InitiativeUserRelationship'
  /initiative/user-relationships/{userId}:
    get:
      summary: Returns all initiative user relationships for this user that the caller has access to view
      operationId: listInitiativeUserRelationshipsByUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to fetch relationships for
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InitiativeUserRelationship'
  /initiative/{id}/invitations:
    get:
      summary: Returns all initiative invitations associated with the initiative
      operationId: listInitiativeInvitations
      parameters:
        - name: id
          in: path
          description: ID of the initiative to fetch invitations for
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InitiativeInvitation'
  /initiative-invitation:
    post:
      summary: Creates an initiative invitation
      description: Creates an initiative invitation
      operationId: createInitiativeInvitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeInvitationCreate'
      responses:
        '204':
          description: initiative invitation created successfully
  /initiative-invitation/{id}:
    get:
      summary: Returns the initiative invitation from this id, if it exists
      operationId: getInitiativeInvitation
      parameters:
        - name: id
          in: path
          description: ID of the invitation to fetch details about
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiativeInvitation'
  /initiative-invitation/{id}:claim:
    post:
      summary: Claims this initiative invitation, if it exists
      operationId: claimInitiativeInvitation
      parameters:
        - name: id
          in: path
          description: ID of the invitation to claim
          required: true
          schema:
            type: string
      responses:
        '204':
          description: initiative invitation claimed successfully
        '409':
          description: initiative invitation already claimed
    delete:
      summary: Deletes an initiative invitation by id
      description: deletes an initiative based on the ID supplied
      operationId: deleteInitiativeInvitation
      parameters:
        - name: id
          in: path
          description: ID of initiative invitation to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: initiative invitation deleted successfully
  /initiative/{initiativeId}/user-relationship/{userId}:
    get:
      summary: Returns the initiative user relationship from this id, if it exists
      operationId: getInitiativeUserRelationship
      parameters:
        - name: initiativeId
          in: path
          description: ID of the initiative
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiativeUserRelationship'
    patch:
      summary: Updates initiative user relationship properties
      description: Updates a given user's relationship properties for a given initiative
      operationId: updateInitiativeUserRelationship
      parameters:
        - name: initiativeId
          in: path
          description: ID of the initiative
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
      requestBody:
        description: Relationship object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeUserRelationshipChanges'
      responses:
        '204':
          description: the relationship changes were applied successfully
  /user/me:
    get:
      description: Returns the logged in user, if the user is logged in, otherwise returns empty
      summary: gets info about the logged in user
      operationId: findUserByMe
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/authentication-followup:
    post:
      description: Creates a user in the database, if the user does not yet exist, or returns the existing user.
      summary: a callback after login to create or return the user
      operationId: userAuthenticationFollowup
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{id}:
    get:
      summary: Returns a user by ID
      description: Returns a user based on a single ID
      operationId: findUserById
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Updates user properties
      description: Updates a user's settable properties
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
      requestBody:
        description: User object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChanges'
      responses:
        '204':
          description: the user changes were applied successfully
    delete:
      summary: Deletes a user by ID
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: user deleted
  /test:createPortfolioAsset:
    post:
      summary: Test endpoint, creates a new portfolio asset
      description: |
        Creates a new asset for a portfolio

        Returns a signed URL where the portfolio can be uploaded to.
      operationId: createPortfolioAsset
      responses:
        '200':
          description: The asset can now be uploaded via the given signed URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewPortfolioAsset'
  /startPortfolioUpload:
    post:
      summary: Starts the process of uploading one or more portfolio files
      description: Creates one or more new incomplete portfolio uploads, and creates upload URLs for the user to put their blobs into.
      operationId: startPortfolioUpload
      requestBody:
        description: A request describing the portfolios that the user wants to upload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartPortfolioUploadRequest'
      responses:
        '200':
          description: The assets can now be uploaded via the given signed URLs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartPortfolioUploadResponse'
  /completePortfolioUpload:
    post:
      summary: Called after uploads of portfolios to cloud storage are complete.
      description: Signals that the upload of the portfolios are complete, and that the server should start parsing them.
      operationId: completePortfolioUpload
      requestBody:
        description: A request describing the incomplete uploads that the user wants to begin processing
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePortfolioUploadRequest'
      responses:
        '200':
          description: The process to initiate the parsing of the uploads has been initiated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletePortfolioUploadResponse'
  /test:processPortfolio:
    post:
      summary: Test endpoint, triggers a task to process the portfolio
      description: |
        Starts processing raw uploaded files
      operationId: processPortfolio
      requestBody:
        description: The raw portfolio files to process
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessPortfolioReq'
      responses:
        '200':
          description: The task has been started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessPortfolioResp'
components:
  responses:
    Unauthorized:
      description: the user is not authorized to access this resource - if logged out, try logging in
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: the user is not authorized to access this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Internal:
      description: the server encountered an error while processing the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: the request contained one or more invalid parameters, or the request is otherwise invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: the requested entity doesn't exist, or the user doesn't have access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: the request couldn't be completed because it conflicts with the current state of the entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: the given caller has exceeded their rate limit
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Language:
      type: string
      enum: *LANGUAGES
    PactaVersionCreate:
      type: object
      required:
        - name
        - description
        - digest
      properties:
        name:
          type: string
          description: the human meaningful name of the version of the PACTA model
        description:
          type: string
          description: Additional information about the version of the PACTA model
        digest:
          type: string
          description: The hash (typically SHA256) that uniquely identifies this version of the PACTA model.
    PactaVersion:
      type: object
      required:
        - id
        - name
        - description
        - digest
        - createdAt
        - isDefault
      properties:
        id:
          type: string
          description: Unique id of the pacta version - system assigned
        name:
          type: string
          description: the human meaningful name of the version of the PACTA model
        description:
          type: string
          description: Additional information about the version of the PACTA model
        digest:
          type: string
          description: The hash (typically SHA256) that uniquely identifies this version of the PACTA model.
        createdAt:
          type: string
          format: date-time
          description: The time at which this version of the PACTA model was created
        isDefault:
          type: boolean
          description: Whether this version of the PACTA model is the default version
    PactaVersionChanges:
      type: object
      properties:
        name:
          type: string
          description: the human meaningful name of the version of the PACTA model
        description:
          type: string
          description: Additional information about the version of the PACTA model
        digest:
          type: string
          description: The hash (typically SHA256) that uniquely identifies this version of the PACTA model.
    InitiativeCreate:
      type: object
      required:
        - id
        - name
        - language
      properties:
        id:
          type: string
          description: the human readable identifier for the initiative, can only include alphanumeric characters, dashes and underscores
        name:
          type: string
          description: the human meaningful name of the version of the initiative
        affiliation:
          type: string
          description: the group that sponsors/created/owns this initiative
        publicDescription:
          type: string
          description: Additional information about the initiative
        internalDescription:
          type: string
          description: Additional information about the initiative, for participants only
        requiresInvitationToJoin:
          type: boolean
          description: If set, only users who have been invited to join this initiative can join it, otherwise, anyone can join it. Defaults to false.
        isAcceptingNewMembers:
          type: boolean
          description: If set, new users can join the initiative. Defaults to false.
        isAcceptingNewPortfolios:
          type: boolean
          description: If set, users that are members of this initiative can add portfolios to it.
        language:
          description: The language this initiative should be conducted in.
          type: string
          enum: *LANGUAGES
        pactaVersion:
          type: string
          description: The id of the PACTA model that this initiative should use, if not specified, the default PACTA model will be used.
    Initiative:
      type: object
      required:
        - id
        - name
        - affiliation
        - publicDescription
        - internalDescription
        - requiresInvitationToJoin
        - isAcceptingNewMembers
        - isAcceptingNewPortfolios
        - pactaVersionId
        - language
        - createdAt
      properties:
        id:
          type: string
          description: the human readable identifier for the initiative, can only include alphanumeric characters, dashes and underscores
        name:
          type: string
          description: the human meaningful name of the version of the initiative
        affiliation:
          type: string
          description: the group that sponsors/created/owns this initiative
        publicDescription:
          type: string
          description: Additional information about the initiative
        internalDescription:
          type: string
          description: Additional information about the initiative, for participants only
        requiresInvitationToJoin:
          type: boolean
          description: If set, only users who have been invited to join this initiative can join it, otherwise, anyone can join it. Defaults to false.
        isAcceptingNewMembers:
          type: boolean
          description: If set, new users can join the initiative. Defaults to false.
        isAcceptingNewPortfolios:
          type: boolean
          description: If set, users that are members of this initiative can add portfolios to it.
        language:
          description: The language this initiative should be conducted in.
          type: string
          enum: *LANGUAGES
        pactaVersion:
          type: string
          description: The pacta model that this initiative should use, if not specified, the default pacta model will be used.
        createdAt:
          type: string
          format: date-time
          description: The time at which this initiative was created.
    InitiativeChanges:
      type: object
      properties:
        name:
          type: string
          description: the human meaningful name of the version of the initiative
        affiliation:
          type: string
          description: the group that sponsors/created/owns this initiative
        publicDescription:
          type: string
          description: Additional information about the initiative
        internalDescription:
          type: string
          description: Additional information about the initiative, for participants only
        requiresInvitationToJoin:
          type: boolean
          description: If set, only users who have been invited to join this initiative can join it, otherwise, anyone can join it. Defaults to false.
        isAcceptingNewMembers:
          type: boolean
          description: If set, new users can join the initiative. Defaults to false.
        isAcceptingNewPortfolios:
          type: boolean
          description: If set, users that are members of this initiative can add portfolios to it.
        language:
          description: The language this initiative should be conducted in.
          type: string
          enum: *LANGUAGES
        pactaVersion:
          type: string
          description: The pacta model that this initiative should use, if not specified, the default pacta model will be used.
    InitiativeInvitationCreate:
      type: object
      required:
        - id
        - initiativeId
      properties:
        id:
          type: string
          description: the human-readable id identifying this initiative invitation
        initiativeId:
          type: string
          description: the id of the initiative that this invitation is for
    InitiativeInvitation:
      type: object
      required:
        - id
        - initiativeId
        - createdAt
      properties:
        id:
          type: string
          description: the human-readable id identifying this initiative invitation
        initiativeId:
          type: string
          description: the id of the initiative that this invitation is for
        usedAt:
          type: string
          description: the time at which this initiative invitation was used, if it has been used
        usedByUserId:
          type: string
          description: the id of the user that used this initiative invitation, if it has been used
        createdAt:
          type: string
          format: date-time
          description: the time at which this initiative invitation was created
    InitiativeUserRelationship:
      type: object
      required:
        - initiativeId
        - userId
        - manager
        - member
        - updatedAt
      properties:
        initiativeId:
          type: string
          description: the inititative that this relationship describes
        userId:
          type: string
          description: the user that this relationship describes
        manager:
          type: boolean
          description: whether this user is a manager of the initiative
        member:
          type: boolean
          description: whether this user is a member of the initiative
        updatedAt:
          type: string
          format: date-time
          description: the time at which this relationship was last updated
    InitiativeUserRelationshipChanges:
      type: object
      properties:
        manager:
          type: boolean
          description: whether this user is a manager of the initiative
        member:
          type: boolean
          description: whether this user is a member of the initiative
    User:
      type: object
      required:
        - id
        - enteredEmail
        - requiredEmail
        - admin
        - superAdmin
        - name
        - preferredLanguage
      properties:
        id:
          type: string
          description: Unique id of the user
        enteredEmail:
          type: string
          description: User's email address as entered
        canonicalEmail:
          type: string
          description: Stanard formatting of the email address of the user
        admin:
          type: boolean
          description: Whether the user is an administrator of the PACTA platform
        superAdmin:
          type: boolean
          description: Whether the user is an administrator of the PACTA platform
        name:
          type: string
          description: Name of the user
        preferredLanguage:
          description: The user's preferred language, if present
          type: string
          enum: *LANGUAGES
    UserChanges:
      type: object
      properties:
        name:
          type: string
          description: The new name of the user
        preferredLanguage:
          description: The user's new preferred language
          type: string
          enum: *LANGUAGES
        admin:
          type: boolean
          description: Whether the given user is an admin
        superAdmin:
          type: boolean
          description: Whether the given user is a super admin
    NewPortfolioAsset:
      type: object
      required:
        - upload_url
        - asset_id
      properties:
        upload_url:
          type: string
          description: The signed URL where the file should be uploaded to, using PUT semantics.
        asset_id:
          type: string
          description: A unique identifier for the uploaded asset
    StartPortfolioUploadRequest:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/StartPortfolioUploadRequestItem'
    StartPortfolioUploadRequestItem:
      type: object
      required:
        - file_name
      properties:
        file_name:
          type: string
          description: The name of the file, including its extension.
    StartPortfolioUploadResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/StartPortfolioUploadResponseItem'
    StartPortfolioUploadResponseItem:
      type: object
      required:
        - file_name
        - upload_url
        - incomplete_upload_id
      properties:
        file_name:
          type: string
          description: The name of the file, including its extension, used as a round-trip id.
        upload_url:
          type: string
          description: The signed URL where the file should be uploaded to, using PUT semantics.
        incomplete_upload_id:
          type: string
          description: A unique identifier for the uploaded asset
    CompletePortfolioUpload:
      type: object
      required:
        - incomplete_upload_ids
      properties:
        incomplete_upload_ids:
          type: array
          items:
            type: string
          description: The incomplete uploads that have been successfully uploaded and are ready for parsing.
    CompletePortfolioUpload:
      type: object
      required:
        - analysis_id
      properties:
        analysis_id:
          type: string
          description: The analysis id to track for the parsing task.
    ProcessPortfolioReq:
      type: object
      required:
        - asset_ids
      properties:
        asset_ids:
          type: array
          items:
            type: string
    ProcessPortfolioResp:
      type: object
      required:
        - task_id
      properties:
        task_id:
          type: string
          description: The ID of the async task for processing the portfoio
    Error:
      type: object
      required:
        - message
        - error_id
      properties:
        message:
          type: string
          description: Human readable error message (in English)
        error_id:
          type: string
          description: |-
            An enum-like type indicating a more specific type of error.

            An example might be getting a 401 Unauthorized because you're logged in with multiple emails and haven't selected one, the error_id could be 'multiple_emails'.
