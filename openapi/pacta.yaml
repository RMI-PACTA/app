openapi: "3.0.0"
info:
  version: 1.0.0
  title: RMI PACTA
  description: |
    API for interacting with RMI's Paris Agreement Capital Transition Assessment (PACTA) infrastructure

    Note that only endpoint-specific errors will be documented. Standard errors
    (access denied, not found, internal server errors) may be thrown by any
    endpoint, see #/components/responses and #/components/schemas/Error for
    more information.
  termsOfService: TODO
  contact:
    name: Silicon Ally
    email: contact@siliconally.org
    url: https://siliconally.org
  license:
    name: MIT
    url: https://mit-license.org/
servers:
  - url: TODO

basePath: /v1
paths:
  /access-blob-content:
    post:
      summary: Gives the caller access to the blob 
      description: Checks whether the user can access the blobs, and if so, returns blob download URLs for each, generating an audit log along the way 
      operationId: accessBlobContent 
      requestBody:
        description: Information about the blobs that are requested 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessBlobContentReq'
      responses:
        '200':
          description: the user can access the blobs, and the access URLs are returned, along with information about their expiration 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessBlobContentResp'

  /pacta-version/{id}:
    get:
      summary: Returns a version of the PACTA model by ID
      operationId: findPactaVersionById
      parameters:
        - name: id
          in: path
          description: ID of pacta version to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: pacta response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PactaVersion'
    patch:
      summary: Updates a PACTA version
      description: Updates a PACTA version's settable properties
      operationId: updatePactaVersion
      parameters:
        - name: id
          in: path
          description: ID of PACTA version to update
          required: true
          schema:
            type: string
      requestBody:
        description: PACTA Version object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PactaVersionChanges'
      responses:
        '204':
          description: pacta version updated successfully
    delete:
      summary: Deletes a pacta version by ID
      description: deletes a single pacta version based on the ID supplied
      operationId: deletePactaVersion
      parameters:
        - name: id
          in: path
          description: ID of pacta version to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: pacta version deleted successfully
  /pacta-version/{id}/set-default:
    post:
      summary: Marks this version of the PACTA model as the default
      operationId: markPactaVersionAsDefault
      parameters:
        - name: id
          in: path
          description: ID of pacta version to fetch
          required: true
          schema:
            type: string
      responses:
        '204':
          description: updated successfully
  /pacta-versions:
    get:
      summary: Returns all versions of the PACTA model
      operationId: listPactaVersions
      responses:
        '200':
          description: pacta versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PactaVersion'
    post:
      summary: Creates a PACTA version
      description: Creates a PACTA version
      operationId: createPactaVersion
      requestBody:
        description: PACTA Version object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PactaVersionCreate'
      responses:
        '204':
          description: pacta version created successfully
  /admin/merge-users:
    post:
      summary: Merges two users together
      description: Merges two users together
      operationId: mergeUsers
      requestBody:
        description: a request describing the two users to merge 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeUsersReq'
      responses:
        '200':
          description: the users were merged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeUsersResp'
  /initiative/{id}:
    get:
      summary: Returns an initiative by ID
      operationId: findInitiativeById
      parameters:
        - name: id
          in: path
          description: ID of the initiative to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the initiative requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Initiative'
    patch:
      summary: Updates an initiative
      description: Updates an initiative's settable properties
      operationId: updateInitiative
      parameters:
        - name: id
          in: path
          description: ID of the initiative to update
          required: true
          schema:
            type: string
      requestBody:
        description: initiative object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeChanges'
      responses:
        '204':
          description: initiative updated successfully
    delete:
      summary: Deletes an initiative by id
      description: deletes an initiative based on the ID supplied
      operationId: deleteInitiative
      parameters:
        - name: id
          in: path
          description: ID of initiative to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: initiative deleted successfully
  /initiative/{id}/all-data:
    get:
      summary: Returns all of the portfolios that are participating in the initiative 
      operationId: allInitiativeData 
      parameters:
        - name: id
          in: path
          description: ID of the initiative to fetch data for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the initiative data 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiativeAllData'
  /initiatives:
    get:
      summary: Returns all initiatives
      operationId: listInitiatives
      responses:
        '200':
          description: gets all initiatives
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Initiative'
    post:
      summary: Creates a initiative
      description: Creates a new initiative
      operationId: createInitiative
      requestBody:
        description: Initiative object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeCreate'
      responses:
        '204':
          description: initiative created successfully
  /initiative/{initiativeId}/user-relationships:
    get:
      summary: Returns all initiative user relationships for this initiative that the caller has access to view
      operationId: listInitiativeUserRelationshipsByInitiative
      parameters:
        - name: initiativeId
          in: path
          description: ID of the initiative to fetch relationships for
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InitiativeUserRelationship'
  /initiative/user-relationships/{userId}:
    get:
      summary: Returns all initiative user relationships for this user that the caller has access to view
      operationId: listInitiativeUserRelationshipsByUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to fetch relationships for
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InitiativeUserRelationship'
  /initiative/{id}/invitations:
    get:
      summary: Returns all initiative invitations associated with the initiative
      operationId: listInitiativeInvitations
      parameters:
        - name: id
          in: path
          description: ID of the initiative to fetch invitations for
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InitiativeInvitation'
  /initiative-invitation:
    post:
      summary: Creates an initiative invitation
      description: Creates an initiative invitation
      operationId: createInitiativeInvitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeInvitationCreate'
      responses:
        '204':
          description: initiative invitation created successfully
  /initiative-invitation/{id}:
    get:
      summary: Returns the initiative invitation from this id, if it exists
      operationId: getInitiativeInvitation
      parameters:
        - name: id
          in: path
          description: ID of the invitation to fetch details about
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiativeInvitation'
  /initiative-invitation/{id}:claim:
    post:
      summary: Claims this initiative invitation, if it exists
      operationId: claimInitiativeInvitation
      parameters:
        - name: id
          in: path
          description: ID of the invitation to claim
          required: true
          schema:
            type: string
      responses:
        '204':
          description: initiative invitation claimed successfully
        '409':
          description: initiative invitation already claimed
    delete:
      summary: Deletes an initiative invitation by id
      description: deletes an initiative based on the ID supplied
      operationId: deleteInitiativeInvitation
      parameters:
        - name: id
          in: path
          description: ID of initiative invitation to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: initiative invitation deleted successfully
  /initiative/{initiativeId}/user-relationship/{userId}:
    get:
      summary: Returns the initiative user relationship from this id, if it exists
      operationId: getInitiativeUserRelationship
      parameters:
        - name: initiativeId
          in: path
          description: ID of the initiative
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiativeUserRelationship'
    patch:
      summary: Updates initiative user relationship properties
      description: Updates a given user's relationship properties for a given initiative
      operationId: updateInitiativeUserRelationship
      parameters:
        - name: initiativeId
          in: path
          description: ID of the initiative
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
      requestBody:
        description: Relationship object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiativeUserRelationshipChanges'
      responses:
        '204':
          description: the relationship changes were applied successfully
  /initiative/{initiativeId}/portfolio-relationship/{portfolioId}:
    post:
      summary: creates an initiative portfolio relationship
      description: creates a membership relationship between the portfolio and the initiative 
      operationId: createInitiativePortfolioRelationship
      parameters:
        - name: initiativeId
          in: path
          description: ID of the initiative
          required: true
          schema:
            type: string
        - name: portfolioId
          in: path
          description: ID of the portfolio 
          required: true
          schema:
            type: string
      responses:
        '204':
          description: the relationship was created successfully
    delete:
      summary: Deletes an initiative:portfolio relationship
      description: Deletes a given portfolio's relationship with a given initiative
      operationId: deleteInitiativePortfolioRelationship
      parameters:
        - name: initiativeId
          in: path
          description: ID of the initiative
          required: true
          schema:
            type: string
        - name: portfolioId
          in: path
          description: ID of the portfolio 
          required: true
          schema:
            type: string
      responses:
        '204':
          description: the relationship was deleted, if it existed
  /portfolio-groups:
    get:
      summary: Returns the portfolio groups that the user has access to 
      operationId: listPortfolioGroups 
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPortfolioGroupsResp'
    post:
      summary: Creates a portfolio group
      description: Creates a new portfolio group 
      operationId: createPortfolioGroup
      requestBody:
        description: Initial portfolio group object properties
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioGroupCreate'
       
      responses:
        '200':
          description: portfolio group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioGroup'
  /portfolio-group/{id}:
    get:
      summary: Returns a portfolio group by ID
      description: Returns a portfolio group based on a single ID
      operationId: findPortfolioGroupById
      parameters:
        - name: id
          in: path
          description: ID of portfolio group to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: portfolio group response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioGroup'
    patch:
      summary: Updates portfolio group properties
      description: Updates a portfolio group's settable properties
      operationId: updatePortfolioGroup
      parameters:
        - name: id
          in: path
          description: ID of the portfolio group to update
          required: true
          schema:
            type: string
      requestBody:
        description: Portfolio Group object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioGroupChanges'
      responses:
        '204':
          description: the changes were applied successfully
    delete:
      summary: Deletes a portfolio group by ID
      description: deletes a portfolio group based on the ID supplied - note this does not delete the portfolios that are members to this group
      operationId: deletePortfolioGroup
      parameters:
        - name: id
          in: path
          description: ID of portfolio group to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: portfolio group deleted 
  /portfolio-group-membership:
    put:
      summary: creates a portfolio group membership 
      description: creates a portfolio group membership 
      operationId: createPortfolioGroupMembership 
      requestBody:
        description: Portfolio Group membership to create 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioGroupMembershipIds'
      responses:
        '204':
          description: the changes were applied successfully
    delete:
      summary: Deletes a portfolio group membership 
      description: removes the membership of a portfolio in a portfolio - note this does not delete the portfolio or the portfolio group
      operationId: deletePortfolioGroupMembership
      requestBody:
        description: Portfolio Group membership to delete 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioGroupMembershipIds'
      responses:
        '204':
          description: portfolio group membership deleted 
  /incomplete-uploads:
    get:
      description: Gets the incomplete uploads that the user is the owner of 
      operationId: listIncompleteUploads 
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIncompleteUploadsResp'
  /incomplete-upload/{id}:
    get:
      summary: Returns an incomplete upload by ID
      description: Returns an incomplete upload based on a single ID
      operationId: findIncompleteUploadById
      parameters:
        - name: id
          in: path
          description: ID of incomplete upload to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: incomplete upload response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncompleteUpload'
    patch:
      summary: Updates incomplete upload properties
      description: Updates a incomplete upload's settable properties
      operationId: updateIncompleteUpload
      parameters:
        - name: id
          in: path
          description: ID of incomplete upload to update
          required: true
          schema:
            type: string
      requestBody:
        description: Incomplete Upload object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncompleteUploadChanges'
      responses:
        '204':
          description: the user changes were applied successfully
    delete:
      summary: Deletes an incomplete upload by ID
      description: deletes an incomplete upload based on the ID supplied
      operationId: deleteIncompleteUpload
      parameters:
        - name: id
          in: path
          description: ID of incomplete upload to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: incomplete upload deleted
  /portfolios:
    get:
      description: Gets the list of portfolios that the user is the owner of 
      operationId: listPortfolios
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPortfoliosResp'
  /portfolio/{id}:
    get:
      summary: Returns an portfolio by ID
      description: Returns an portfolio based on a single ID
      operationId: findPortfolioById
      parameters:
        - name: id
          in: path
          description: ID of portfolio to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: portfolio response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
    patch:
      summary: Updates portfolio properties
      description: Updates a portfolio's settable properties
      operationId: updatePortfolio
      parameters:
        - name: id
          in: path
          description: ID of portfolio to update
          required: true
          schema:
            type: string
      requestBody:
        description: portfolio object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioChanges'
      responses:
        '204':
          description: the user changes were applied successfully
    delete:
      summary: Deletes an portfolio by ID
      description: deletes an portfolio based on the ID supplied
      operationId: deletePortfolio
      parameters:
        - name: id
          in: path
          description: ID of portfolio to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: portfolio deleted
  /user/me:
    get:
      description: Returns the logged in user, if the user is logged in, otherwise returns empty
      summary: gets info about the logged in user
      operationId: findUserByMe
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/authentication-followup:
    post:
      description: Creates a user in the database, if the user does not yet exist, or returns the existing user.
      summary: a callback after login to create or return the user
      operationId: userAuthenticationFollowup
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{id}:
    get:
      summary: Returns a user by ID
      description: Returns a user based on a single ID
      operationId: findUserById
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Updates user properties
      description: Updates a user's settable properties
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
      requestBody:
        description: User object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChanges'
      responses:
        '204':
          description: the user changes were applied successfully
    delete:
      summary: Deletes a user by ID
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: user deleted
  /audit-logs:
    post:
      summary: queries the platform's audit logs
      description: returns back audit logs that matc the user's query 
      operationId: listAuditLogs 
      requestBody:
        description: A request describing which audit logs should be returned 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditLogQueryReq'
      responses:
        '200':
          description: The audit logs that matched the requested query, if any 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogQueryResp'
  /portfolio-upload:
    post:
      summary: Starts the process of uploading one or more portfolio files
      description: Creates one or more new incomplete portfolio uploads, and creates upload URLs for the user to put their blobs into.
      operationId: startPortfolioUpload
      requestBody:
        description: A request describing the portfolios that the user wants to upload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartPortfolioUploadReq'
      responses:
        '200':
          description: The assets can now be uploaded via the given signed URLs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartPortfolioUploadResp'
  /portfolio-upload:complete:
    post:
      summary: Called after uploads of portfolios to cloud storage are complete.
      description: Signals that the upload of the portfolios are complete, and that the server should start parsing them.
      operationId: completePortfolioUpload
      requestBody:
        description: A request describing the incomplete uploads that the user wants to begin processing
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletePortfolioUploadReq'
      responses:
        '200':
          description: The process to initiate the parsing of the uploads has been initiated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletePortfolioUploadResp'
  /analyses:
    get:
      description: Gets the analyses that the user is the owner of 
      operationId: listAnalyses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAnalysesResp'
  /analysis/{id}:
    get:
      summary: Returns an analysis by ID
      description: Returns an analysis based on a single ID
      operationId: findAnalysisById
      parameters:
        - name: id
          in: path
          description: ID of analysis to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: analysis response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analysis'
    patch:
      summary: Updates writable analysis properties
      description: Updates an analysis' settable properties
      operationId: updateAnalysis
      parameters:
        - name: id
          in: path
          description: ID of analysis to update
          required: true
          schema:
            type: string
      requestBody:
        description: Analayis object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisChanges'
      responses:
        '204':
          description: the changes were applied successfully
    delete:
      summary: Deletes an analysis (and its artifacts) by ID
      description: deletes an analysis based on the ID supplied
      operationId: deleteAnalysis
      parameters:
        - name: id
          in: path
          description: ID of analysis to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: analysis deleted
  /analysis-artifact/{id}:
    patch:
      summary: Updates writable analysis artifact properties
      description: Updates an analysis artifact's settable properties
      operationId: updateAnalysisArtifact
      parameters:
        - name: id
          in: path
          description: ID of analysis artifact to update
          required: true
          schema:
            type: string
      requestBody:
        description: Analysis artifact's object properties to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisArtifactChanges'
      responses:
        '204':
          description: the changes were applied successfully
    delete:
      summary: Deletes an analysis artifact by ID
      description: deletes an analysis artifact based on the ID supplied
      operationId: deleteAnalysisArtifact
      parameters:
        - name: id
          in: path
          description: ID of analysis artifact to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: analysis artifact deleted
  /run-analysis:
    post:
      summary: Requests an anslysis be run 
      description: Creates a snapshot of the requested entity, and starts it running
      operationId: runAnalysis 
      requestBody:
        description: Properties of the analysis to run 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunAnalysisReq'
      responses:
        '200':
          description: information about the requested analysis 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAnalysisResp'
components:
  responses:
    Unauthorized:
      description: the user is not authorized to access this resource - if logged out, try logging in
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: the user is not authorized to access this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Internal:
      description: the server encountered an error while processing the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: the request contained one or more invalid parameters, or the request is otherwise invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: the requested entity doesn't exist, or the user doesn't have access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: the request couldn't be completed because it conflicts with the current state of the entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: the given caller has exceeded their rate limit
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Language:
      type: string
      enum:
        - LanguageEN
        - LanguageFR
        - LanguageES
        - LanguageDE
    FileType:
      type: string
      enum:
        - FileTypeCSV
        - FileTypeYAML
        - FileTypeZIP
        - FileTypeJSON
        - FileTypeHTML
    AnalysisType:
      type: string
      enum:
        - AnalysisTypeAUDIT
        - AnalysisTypeREPORT
    FailureCode:
      type: string
      enum:
        - FailureCodeUNKNOWN
    PactaVersionCreate:
      type: object
      required:
        - name
        - description
        - digest
      properties:
        name:
          type: string
          description: the human meaningful name of the version of the PACTA model
        description:
          type: string
          description: Additional information about the version of the PACTA model
        digest:
          type: string
          description: The hash (typically SHA256) that uniquely identifies this version of the PACTA model.
    PactaVersion:
      type: object
      required:
        - id
        - name
        - description
        - digest
        - createdAt
        - isDefault
      properties:
        id:
          type: string
          description: Unique id of the pacta version - system assigned
        name:
          type: string
          description: the human meaningful name of the version of the PACTA model
        description:
          type: string
          description: Additional information about the version of the PACTA model
        digest:
          type: string
          description: The hash (typically SHA256) that uniquely identifies this version of the PACTA model.
        createdAt:
          type: string
          format: date-time
          description: The time at which this version of the PACTA model was created
        isDefault:
          type: boolean
          description: Whether this version of the PACTA model is the default version
    PactaVersionChanges:
      type: object
      properties:
        name:
          type: string
          description: the human meaningful name of the version of the PACTA model
        description:
          type: string
          description: Additional information about the version of the PACTA model
        digest:
          type: string
          description: The hash (typically SHA256) that uniquely identifies this version of the PACTA model.
    PortfolioGroupMembershipIds:
      type: object
      required:
        - portfolioId
        - portfolioGroupId 
      properties:
        portfolioId:
          type: string
          description: the id of the portfolio member of the portfolio group
        portfolioGroupId:
          type: string
          description: the id of the portfolio group 
    PortfolioGroupMembershipPortfolio:
      type: object
      required:
        - portfolio
        - createdAt
      properties:
        portfolio:
          $ref: '#/components/schemas/Portfolio'
        createdAt:
          type: string
          format: date-time
          description: The time at which this membership was created.
    PortfolioGroupMembershipPortfolioGroup:
      type: object
      required:
        - portfolioGroup 
        - createdAt
      properties:
        portfolioGroup:
          $ref: '#/components/schemas/PortfolioGroup'
        createdAt:
          type: string
          format: date-time
          description: The time at which this membership was created.
    PortfolioGroupCreate:
      type: object
      required:
        - name
        - description 
      properties:
        name:
          type: string
          description: the human meaningful name of the portfolio group 
        description:
          type: string
          description: an optional description of the contents or purpose of the portfolio group 
    PortfolioGroup:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
      properties:
        id:
          type: string
          description: the system assigned id of the portfolio group 
        name:
          type: string
          description: the human meaningful name of the portfoio group 
        description:
          type: string
          description: the description of the contents or purpose of the portfolio group
        members:
          type: array
          description: the list of portfolios that are members of this portfolio group
          items:
            $ref: '#/components/schemas/PortfolioGroupMembershipPortfolio'
        createdAt:
          type: string
          format: date-time
          description: The time at which this initiative was created.
    PortfolioGroupChanges:
      type: object
      properties:
        name:
          type: string
          description: the human meaningful name of the portfolio group
        description:
          type: string
          description: the description of the contents or purpose of the portfolio group
    PortfolioInitiativeMembershipPortfolio:
      type: object
      required:
        - createdAt
        - portfolio
      properties:
        addedByUserId:
          type: string
          description: the user that added this portfolio to the initiative
        portfolio: 
          $ref: '#/components/schemas/Portfolio'
        createdAt:
          type: string
          format: date-time
          description: The time at which this relationship was created
    PortfolioInitiativeMembershipInitiative:
      type: object
      required:
        - createdAt
        - initiative 
      properties:
        addedByUserId:
          type: string
          description: the user that added this portfolio to the initiative
        initiative: 
          $ref: '#/components/schemas/Initiative'
        createdAt:
          type: string
          format: date-time
          description: The time at which this relationship was created
    InitiativeCreate:
      type: object
      required:
        - id
        - name
        - language
      properties:
        id:
          type: string
          description: the human readable identifier for the initiative, can only include alphanumeric characters, dashes and underscores
        name:
          type: string
          description: the human meaningful name of the version of the initiative
        affiliation:
          type: string
          description: the group that sponsors/created/owns this initiative
        publicDescription:
          type: string
          description: Additional information about the initiative
        internalDescription:
          type: string
          description: Additional information about the initiative, for participants only
        requiresInvitationToJoin:
          type: boolean
          description: If set, only users who have been invited to join this initiative can join it, otherwise, anyone can join it. Defaults to false.
        isAcceptingNewMembers:
          type: boolean
          description: If set, new users can join the initiative. Defaults to false.
        isAcceptingNewPortfolios:
          type: boolean
          description: If set, users that are members of this initiative can add portfolios to it.
        language:
          description: The language this initiative should be conducted in.
          $ref: '#/components/schemas/Language'
        pactaVersion:
          type: string
          description: The id of the PACTA model that this initiative should use, if not specified, the default PACTA model will be used.
    Initiative:
      type: object
      required:
        - id
        - name
        - affiliation
        - publicDescription
        - internalDescription
        - requiresInvitationToJoin
        - isAcceptingNewMembers
        - isAcceptingNewPortfolios
        - pactaVersionId
        - language
        - createdAt
        - portfolioInitiativeMemberships
      properties:
        id:
          type: string
          description: the human readable identifier for the initiative, can only include alphanumeric characters, dashes and underscores
        name:
          type: string
          description: the human meaningful name of the version of the initiative
        affiliation:
          type: string
          description: the group that sponsors/created/owns this initiative
        publicDescription:
          type: string
          description: Additional information about the initiative
        internalDescription:
          type: string
          description: Additional information about the initiative, for participants only
        requiresInvitationToJoin:
          type: boolean
          description: If set, only users who have been invited to join this initiative can join it, otherwise, anyone can join it. Defaults to false.
        isAcceptingNewMembers:
          type: boolean
          description: If set, new users can join the initiative. Defaults to false.
        isAcceptingNewPortfolios:
          type: boolean
          description: If set, users that are members of this initiative can add portfolios to it.
        language:
          description: The language this initiative should be conducted in.
          $ref: '#/components/schemas/Language'
        pactaVersion:
          type: string
          description: The pacta model that this initiative should use, if not specified, the default pacta model will be used.
        portfolioInitiativeMemberships:
          type: array
          description: the list of portfolios that are members of this initiative
          items: 
            $ref: '#/components/schemas/PortfolioInitiativeMembershipPortfolio'
        createdAt:
          type: string
          format: date-time
          description: The time at which this initiative was created.
    InitiativeChanges:
      type: object
      properties:
        name:
          type: string
          description: the human meaningful name of the version of the initiative
        affiliation:
          type: string
          description: the group that sponsors/created/owns this initiative
        publicDescription:
          type: string
          description: Additional information about the initiative
        internalDescription:
          type: string
          description: Additional information about the initiative, for participants only
        requiresInvitationToJoin:
          type: boolean
          description: If set, only users who have been invited to join this initiative can join it, otherwise, anyone can join it. Defaults to false.
        isAcceptingNewMembers:
          type: boolean
          description: If set, new users can join the initiative. Defaults to false.
        isAcceptingNewPortfolios:
          type: boolean
          description: If set, users that are members of this initiative can add portfolios to it.
        language:
          description: The language this initiative should be conducted in.
          $ref: '#/components/schemas/Language'
        pactaVersion:
          type: string
          description: The pacta model that this initiative should use, if not specified, the default pacta model will be used.
    InitiativeAllData:
      type: object
      required:
        - items 
      properties:
        items:
          type: array
          description: the list of portfolios that are members of this initiative
          items: 
            $ref: '#/components/schemas/InitiativeAllDataPortfolioItem'
    InitiativeAllDataPortfolioItem:
      type: object
      required:
        - name 
        - blobId
        - downloadUrl
        - expirationTime 
      properties:
        name:
          type: string
          description: the name of the portfolio
        blobId:
          type: string
          description: the id of the blob of the portfolio, which can be used to start a new partial download if the first download times out 
        downloadUrl:
          type: string
          description: the url to download the portfolio
        expirationTime:
          type: string
          format: date-time
          description: the time at which the download url will expire
    InitiativeInvitationCreate:
      type: object
      required:
        - id
        - initiativeId
      properties:
        id:
          type: string
          description: the human-readable id identifying this initiative invitation
        initiativeId:
          type: string
          description: the id of the initiative that this invitation is for
    InitiativeInvitation:
      type: object
      required:
        - id
        - initiativeId
        - createdAt
      properties:
        id:
          type: string
          description: the human-readable id identifying this initiative invitation
        initiativeId:
          type: string
          description: the id of the initiative that this invitation is for
        usedAt:
          type: string
          description: the time at which this initiative invitation was used, if it has been used
        usedByUserId:
          type: string
          description: the id of the user that used this initiative invitation, if it has been used
        createdAt:
          type: string
          format: date-time
          description: the time at which this initiative invitation was created
    InitiativeUserRelationship:
      type: object
      required:
        - initiativeId
        - userId
        - manager
        - member
        - updatedAt
      properties:
        initiativeId:
          type: string
          description: the inititative that this relationship describes
        userId:
          type: string
          description: the user that this relationship describes
        manager:
          type: boolean
          description: whether this user is a manager of the initiative
        member:
          type: boolean
          description: whether this user is a member of the initiative
        updatedAt:
          type: string
          format: date-time
          description: the time at which this relationship was last updated
    InitiativeUserRelationshipChanges:
      type: object
      properties:
        manager:
          type: boolean
          description: whether this user is a manager of the initiative
        member:
          type: boolean
          description: whether this user is a member of the initiative
    User:
      type: object
      required:
        - id
        - enteredEmail
        - requiredEmail
        - admin
        - superAdmin
        - name
        - preferredLanguage
      properties:
        id:
          type: string
          description: Unique id of the user
        enteredEmail:
          type: string
          description: User's email address as entered
        canonicalEmail:
          type: string
          description: Stanard formatting of the email address of the user
        admin:
          type: boolean
          description: Whether the user is an administrator of the PACTA platform
        superAdmin:
          type: boolean
          description: Whether the user is an administrator of the PACTA platform
        name:
          type: string
          description: Name of the user
        preferredLanguage:
          description: The user's preferred language, if present
          $ref: '#/components/schemas/Language'
    UserChanges:
      type: object
      properties:
        name:
          type: string
          description: The new name of the user
        preferredLanguage:
          description: The user's new preferred language
          $ref: '#/components/schemas/Language'
        admin:
          type: boolean
          description: Whether the given user is an admin
        superAdmin:
          type: boolean
          description: Whether the given user is a super admin
    NewPortfolioAsset:
      type: object
      required:
        - upload_url
        - asset_id
      properties:
        upload_url:
          type: string
          description: The signed URL where the file should be uploaded to, using PUT semantics.
        asset_id:
          type: string
          description: A unique identifier for the uploaded asset
    StartPortfolioUploadReq:
      type: object
      required:
        - items
        - holdings_date
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/StartPortfolioUploadReqItem'
        holdings_date:
          $ref: '#/components/schemas/HoldingsDate'
    StartPortfolioUploadReqItem:
      type: object
      required:
        - file_name
      properties:
        file_name:
          type: string
          description: The name of the file, including its extension.
    StartPortfolioUploadResp:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/StartPortfolioUploadRespItem'
    StartPortfolioUploadRespItem:
      type: object
      required:
        - file_name
        - upload_url
        - incomplete_upload_id
      properties:
        file_name:
          type: string
          description: The name of the file, including its extension, used as a round-trip id.
        upload_url:
          type: string
          description: The signed URL where the file should be uploaded to, using PUT semantics.
        incomplete_upload_id:
          type: string
          description: A unique identifier for the uploaded asset
    CompletePortfolioUploadReq:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CompletePortfolioUploadReqItem'
          description: The incomplete uploads that have been successfully uploaded to storage and are ready for parsing.
    CompletePortfolioUploadReqItem:
      type: object
      required:
        - incomplete_upload_id
      properties:
        incomplete_upload_id:
          type: string
          description: The unique identifier for the uploaded asset
    CompletePortfolioUploadResp:
      type: object
    AccessBlobContentReq:
      type: object
      required:
        - items 
      properties:
        items:
          type: array
          items: 
            $ref: '#/components/schemas/AccessBlobContentReqItem'
    AccessBlobContentReqItem:
      type: object
      required:
        - blob_id
      properties:
        blob_id:
          type: string
          description: The id of the blob to request the content for.
    AccessBlobContentResp:
      type: object
      required:
        - items 
      properties:
        items:
          type: array 
          description: The list of blob access items, one for each requested blob 
          items: 
            $ref: '#/components/schemas/AccessBlobContentRespItem'
    AccessBlobContentRespItem:
      type: object
      required:
        - blob_id
        - download_url
        - expiration_time
      properties:
        blob_id:
          type: string
          description: The id of the blob to that the content is for.
        download_url:
          type: string
          description: The signed URL where the file can be downloaded from, using GET semantics. 
        expiration_time:
          format: date-time
          type: string
          description: The time at which the signed URL will expire. 
    HoldingsDate:
      type: object
      required:
        - time
      properties:
        time: 
          type: string 
          format: date-time
          description: The time at which the holdings are represented at 
    IncompleteUpload:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - adminDebugEnabled
      properties:
        id:
          type: string # Assuming IncompleteUploadID is a string, otherwise define its structure
          description: Unique identifier for the incomplete upload
        name:
          type: string
          description: Name of the upload
        description:
          type: string
          description: Description of the upload
        holdingsDate:
          $ref: '#/components/schemas/HoldingsDate'
        createdAt:
          type: string
          format: date-time
          description: The time when the upload was created
        ranAt:
          type: string
          format: date-time
          description: The time when the upload process was run
        completedAt:
          type: string
          format: date-time
          description: The time when the upload was completed
        failureCode:
          description: Code describing the failure, if any
          $ref: '#/components/schemas/FailureCode'
        failureMessage:
          type: string
          description: Message describing the failure, if any
        adminDebugEnabled:
          type: boolean
          description: Flag to indicate whether admin debug mode is enabled
    IncompleteUploadChanges:
      type: object
      required:
      properties:
        name:
          type: string
          description: Name of the upload
        description:
          type: string
          description: Description of the upload
        adminDebugEnabled:
          type: boolean
          description: Flag to indicate whether admin debug mode is enabled
    Portfolio:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - adminDebugEnabled
        - numberOfRows
      properties:
        id: 
          type: string
          description: the system assigned unique identifier of the portfolio 
        name:
          type: string
          description: the human meaningful name of the portfolio
        description:
          type: string
          description: Additional information about the portfolio
        createdAt:
          type: string
          format: date-time
          description: The time at which this portfolio was successfully parsed from a raw  
        holdingsDate: 
          $ref: '#/components/schemas/HoldingsDate'
        adminDebugEnabled:
          type: boolean 
          description: Whether the admin debug mode is enabled for this portfolio
        numberOfRows:
          type: integer
          description: The number of rows in the portfolio
        groups:
          type: array
          description: The list of portfolio groups that this portfolio is a member of
          items:
            $ref: '#/components/schemas/PortfolioGroupMembershipPortfolioGroup'
        initiatives:
          type: array
          description: The list of initiatives that this portfolio is a member of
          items: 
            $ref: '#/components/schemas/PortfolioInitiativeMembershipInitiative'
    PortfolioChanges:
      type: object
      properties:
        name:
          type: string
          description: the human meaningful name of the portfolio
        description:
          type: string
          description: Additional information about the portfolio
        adminDebugEnabled:
          type: boolean 
          description: Whether the admin debug mode is enabled for this portfolio
    PortfolioSnapshot:
      type: object
      description: represents an immutable description of a collection of portfolios at a point in time, used to ensure reproducibility and change detection
      required:
        - id 
        - portfolioIds 
      properties:
        id: 
          type: string
          description: the system assigned unique identifier of the snapshot 
        portfolioIds:
          type: array
          items:
            type: string 
          description: the full set of denormalized portfolios included in this analysis 
        initiative:
          description: if populated, this snapshot represents a snapshot of this initiative
          $ref: '#/components/schemas/Initiative'
        portfolioGroup:
          description: if populated, this snapshot represents a snapshot of this portfolio group 
          $ref: '#/components/schemas/PortfolioGroup'
        portfolio:
          description: if populated, this snapshot represents a snapshot of this solitary portfolio 
          $ref: '#/components/schemas/Portfolio'
    Blob:
      type: object
      required:
        - id 
        - fileType 
        - fileName 
        - createdAt
      properties:
        id: 
          type: string
          description: the system assigned unique identifier of the blob
        fileName:
          type: string
          description: the human meaningful name of the file
        fileType:
          description: the type (extension) of the file
          $ref: '#/components/schemas/FileType'
        createdAt:
          type: string
          format: date-time
          description: The time at which this blob was created within the system 
    AnalysisArtifact:
      type: object
      required:
        - id
        - adminDebugEnabled
        - sharedToPublic 
        - blob
      properties:
        id: 
          type: string
          description: the system assigned unique identifier of the artifact 
        adminDebugEnabled:
          type: boolean 
          description: Whether the admin debug mode is enabled for this artifact 
        sharedToPublic:
          type: boolean 
          description: Whether this artifact is publicly accessible 
        blob: 
          description: Information about the file/artifact itself
          $ref: '#/components/schemas/Blob'     
    AnalysisArtifactChanges:
      type: object
      properties:
        adminDebugEnabled:
          type: boolean 
          description: Whether the admin debug mode is enabled for this artifact 
        sharedToPublic:
          type: boolean 
          description: Whether this artifact is publicly accessible 
    Analysis:
      type: object
      required:
        - id
        - analysisType
        - pactaVersion
        - portfolioSnapshot
        - name
        - description
        - createdAt
        - artifacts
      properties:
        id: 
          type: string
          description: the system assigned unique identifier of the analysis
        analysisType:
          description: the type of analysis that was run on this object 
          $ref: '#/components/schemas/AnalysisType'
        pactaVersion: 
          type: string
          description: The pacta model that was used to generate this analysis
        portfolioSnapshot:
          description: The snapshot of portfolios that was used to generate this analysis
          $ref: '#/components/schemas/PortfolioSnapshot' 
        name:
          type: string
          description: the human meaningful name of the analysis, editable by the user
        description:
          type: string
          description: Additional information about the analysis, editable by the user
        createdAt:
          type: string
          format: date-time
          description: The time at which this analysis was created
        ranAt: 
          type: string
          format: date-time
          description: The time at which this analysis was run, if set
        completedAt: 
          type: string
          format: date-time
          description: The time at which this analysis completed its run (successfully or not), if set 
        failureCode: 
          description: The code describing the failure, if any 
          $ref: '#/components/schemas/FailureCode'
        failureMessage: 
          type: string
          description: The english description of the failure, if any       
        artifacts:
          type: array
          description: The list of artifacts that were generated by this analysis
          items:
            $ref: '#/components/schemas/AnalysisArtifact'
    AnalysisChanges:
      type: object
      properties:
        name:
          type: string
          description: the human meaningful name of the analysis, editable by the user
        description:
          type: string
          description: Additional information about the analysis, editable by the user
    ListIncompleteUploadsReq:
      type: object
    ListIncompleteUploadsResp:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IncompleteUpload'
    ListAnalysesReq:
      type: object
    ListAnalysesResp:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Analysis'
    RunAnalysisReq:
      type: object
      required:
        - analysisType
        - name
        - description
      properties:
        analysisType:
          description: the type of analysis that should be run
          $ref: '#/components/schemas/AnalysisType'
        pactaVersionId:
          type: string
          description: The pacta model that should be used to generate this analysis
        name:
          type: string
          description: the human meaningful name of the analysis, editable by the user
        description:
          type: string
          description: Additional information about the analysis, editable by the user
        portfolioId:
          type: string
          description: If populated, this analysis should be run on this portfolio
        portfolioGroupId:
          type: string
          description: If populated, this analysis should be run on this portfolio group
        initiativeId:
          type: string
          description: If populated, this analysis should be run on this initiative
    RunAnalysisResp:
      type: object
      required:
        - analysisId 
      properties:
        analysisId:
          type: string
          description: the system assigned unique identifier of the analysis that has been requested 
    ListPortfoliosReq:
      type: object
    ListPortfoliosResp:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Portfolio'
    ListPortfolioGroupsReq:
      type: object
    ListPortfolioGroupsResp:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioGroup'
    ParsePortfolioReq:
      type: object
      required:
        - asset_ids
      properties:
        asset_ids:
          type: array
          items:
            type: string
    ParsePortfolioResp:
      type: object
      required:
        - task_id
      properties:
        task_id:
          type: string
          description: The ID of the async task for processing the portfoio
    AuditLogAction:
      type: string
      enum:
        - AuditLogActionCreate
        - AuditLogActionUpdate
        - AuditLogActionDelete
        - AuditLogActionAddTo
        - AuditLogActionRemoveFrom
        - AuditLogActionEnableAdminDebug
        - AuditLogActionDisableAdminDebug
        - AuditLogActionDownload
        - AuditLogActionEnableSharing
        - AuditLogActionDisableSharing
        - AuditLogActionReadMetadata
        - AuditLogActionTransferOwnership
    AuditLogActorType:
      type: string
      enum:
        - AuditLogActorTypePublic
        - AuditLogActorTypeOwner
        - AuditLogActorTypeAdmin
        - AuditLogActorTypeSuperAdmin
        - AuditLogActorTypeSystem
    AuditLogTargetType:
      type: string
      enum:
        - AuditLogTargetTypeUser
        - AuditLogTargetTypePortfolio
        - AuditLogTargetTypeIncompleteUpload
        - AuditLogTargetTypePortfolioGroup
        - AuditLogTargetTypeInitiative
        - AuditLogTargetTypeInitiativeInvitation
        - AuditLogTargetTypePactaVersion
        - AuditLogTargetTypeAnalysis
        - AuditLogTargetTypeAnalysisArtifact
    AuditLogQueryWhere:
      type: object
      properties:
        inId:
          type: array
          description: a list of audit log ids to filter by
          items: 
            type: string
        minCreatedAt:
          type: string
          format: date-time 
          description: a minimum time for audit logs to filter audit logs by 
        maxCreatedAt:
          type: string
          format: date-time 
          description: a maximum time for audit logs to filter audit logs by 
        inAction:
          type: array
          description: a list of audit log action types to filter audit logs by 
          items: 
            $ref: '#/components/schemas/AuditLogAction'
        inActorType:
          type: array
          description: a list of audit log actor types to filter audit logs by 
          items: 
            $ref: '#/components/schemas/AuditLogActorType'
        inActorId:
          type: array
          description: a list of actor user ids to filter audit logs by
          items: 
            type: string
        inActorOwnerId:
          type: array
          description: a list of actor owner ids to filter audit logs by
          items: 
            type: string
        inTargetType:
          type: array
          description: a list of audit log target types to filter audit logs by 
          items: 
            $ref: '#/components/schemas/AuditLogTargetType'
        inTargetId:
          type: array
          description: a list of target ids to filter audit logs by 
          items: 
            type: string
        inTargetOwnerId:
          type: array
          description: a list of target owner ids to filter audit logs by 
          items: 
            type: string
    AuditLogQuerySortBy:
      type: string
      enum:
        - AuditLogQuerySortByCreatedAt
        - AuditLogQuerySortByActorType
        - AuditLogQuerySortByActorId
        - AuditLogQuerySortByActorOwnerId
        - AuditLogQuerySortByPrimaryTargetId
        - AuditLogQuerySortByPrimaryTargetType
        - AuditLogQuerySortByPrimaryTargetOwnerId
        - AuditLogQuerySortBySecondaryTargetId
        - AuditLogQuerySortBySecondaryTargetType
        - AuditLogQuerySortBySecondaryTargetOwnerId
    AuditLogQuerySort:
      type: object
      required:
        - by
        - ascending
      properties:
        by:
          $ref: '#/components/schemas/AuditLogQuerySortBy'
        ascending:
          type: boolean
          description: whether the sort should be ascending or descending
    AuditLogQueryReq:
      type: object
      required:
        - wheres
      properties:
        cursor:
          type: string
          description: if provided, continues an existing query at the given point 
        limit: 
          type: integer
          description: if provided, requests this number of records at maximum - default/maximum is 100
        wheres:
          type: array 
          description: the constraints to place on the returned records - this must be set to something which limits it to a scope the user should have access to
          items: 
            $ref: '#/components/schemas/AuditLogQueryWhere'
        sorts:
          type: array 
          description: the ordering that the results should be returned in - if empty, an ordering by created at date will be applied 
          items: 
            $ref: '#/components/schemas/AuditLogQuerySort'
    AuditLogQueryResp:
      type: object
      required:
        - auditLogs
        - cursor
        - hasNextPage
      properties:
        auditLogs:
          type: array
          items: 
            $ref: '#/components/schemas/AuditLog'
        hasNextPage:
          type: boolean
          description: describes whether there are more records to query
        cursor:
          type: string
          description: the parameter to re-request with to continue this query on the next page of results 
    AuditLog:
      type: object
      required:
        - id
        - createdAt
        - actorType
        - action
        - primaryTargetType
        - primaryTargetId
        - primaryTargetOwner
      properties:
        id:
          type: string
          description: the unique identifier of a given audit log
        createdAt:
          type: string
          format: date-time
          description: the time that this audit log was created/the action was undertaken
        actorType:
          description: the authority that this actor was acting as when performing this action
          $ref: '#/components/schemas/AuditLogActorType'
        actorId:
          type: string
          description: the user id of the actor that initiated this action, not populated if the system initiated the action 
        actorOwnerId:
          type: string
          description: the owner id of the actor that initiated this action, not populated if the system initiated the action 
        action:
          description: the action that generated this audit log
          $ref: '#/components/schemas/AuditLogAction'
        primaryTargetType:
          description: the object category that this action was performed on
          $ref: '#/components/schemas/AuditLogTargetType'
        primaryTargetId:
          type: string
          description: the id of the object that this action was performed on 
        primaryTargetOwner:
          type: string
          description: the id of the owner of the primary object this action was performed on 
        secondaryTargetType:
          description: the object category of the secondary object (membership partner, typically) that this action was performed on
          $ref: '#/components/schemas/AuditLogTargetType'
        secondaryTargetId:
          type: string
          description: the id of the secondary object that this action was performed on 
        secondaryTargetOwner:
          type: string
          description: the id of the owner of the secondary object this action was performed on
    MergeUsersReq:
      type: object
      required:
        - fromUserId
        - toUserId
      properties:
        fromUserId:
          type: string
          description: the user id of the user to merge records from, and to be deleted after the merge 
        toUserId:
          type: string
          description: the user id of the user to recieve merged records and to exist after the merge 
    MergeUsersResp:
      type: object
      required:
        - incompleteUploadCount
        - analysisCount
        - portfolioCount
        - portfolioGroupCount
        - auditLogsCreated
      properties:
        incompleteUploadCount:
          type: integer
          description: the number of incomplete uploads that were transferred to the new user 
        analysisCount:
          type: integer
          description: the number of analyses that were transferred to the new user
        portfolioCount:
          type: integer
          description: the number of portfolios that were transferred to the new user
        portfolioGroupCount:
          type: integer
          description: the number of portfolio groups that were transferred to the new user
        auditLogsCreated:
          type: integer
          description: the number of audit logs that were created to record the merge
    Error:
      type: object
      required:
        - message
        - error_id
      properties:
        message:
          type: string
          description: Human readable error message (in English)
        error_id:
          type: string
          description: |-
            An enum-like type indicating a more specific type of error.

            An example might be getting a 401 Unauthorized because you're logged in with multiple emails and haven't selected one, the error_id could be 'multiple_emails'.
